import inspect
import logging
from pprint import pprint

import click
from halo import Halo
import yaml

from cli.mote import Mote
from cli.otbox import OTBox
from cli.utils import setup_logger

@click.group()
@click.option('-v', '--verbose', count=True)
@click.option('-c', '--config_file_path', type=click.Path(exists=True),
              help='path to config.yml to use')
@click.pass_context
def cli(ctx, verbose, config_file_path=None):
    ctx.ensure_object(dict)
    if config_file_path:
        with open(config_file_path, 'r') as f:
            config = yaml.safe_load(f)
    else:
        config = {}
    ctx.obj['config'] = config
    setup_logger(verbose)

@cli.group()
@click.pass_context
@click.argument('device_id')
def otbox(ctx, device_id):
    ctx.obj['device'] = OTBox(device_id, ctx.obj['config'])

@cli.group()
@click.pass_context
@click.argument('device_id')
def mote(ctx, device_id):
    ctx.obj['device'] = Mote(device_id, ctx.obj['config'])

def get_subcmd(method_name):
    def _subcmd(ctx, **kwargs):
        method = getattr(ctx.obj['device'], method_name)
        with Halo(text='Executing "{}"...'.format(method_name)):
            result = method(**kwargs)
        pprint(result)
    return _subcmd

# register otbox subcommands
for device_command in [otbox, mote]:
    add_subcommand = getattr(device_command, 'command')
    if device_command == otbox:
        device_class = OTBox
    else:
        device_class = Mote
    for name, type in inspect.getmembers(device_class,
                                         predicate=inspect.isfunction):
        if name.startswith('_'):
            # skip this private method
            continue
        else:
            # registering a subcommand
            subcmd = get_subcmd(name)

            # add options; use options instead of arguments so as to
            # have help messages
            arg_spec = inspect.getfullargspec(getattr(device_class, name))
            for arg in [arg for arg in arg_spec.args if arg != 'self']:
                option_args = {'required': True,
                                'help': arg_spec.annotations[arg]}
                # convert 'arg_foo_bar' to '--arg-foo-bar'
                arg_name = '--' + arg.replace('_', '-')
                subcmd = click.option(arg_name, **option_args)(subcmd)
            # add the subcommand
            add_subcommand(name=name)(click.pass_context(subcmd))

if __name__ == '__main__':
    cli()
