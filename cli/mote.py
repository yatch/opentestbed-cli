import json

import netaddr

from cli.mqtt_client import MQTTClient
from cli.msg import escape, unescape, crc, HDLC_FLAG
from cli.utils import get_base64_string

class Mote(MQTTClient):
    RESP_TIMEOUT_SECONDS = 5
    PROGRAM_TIMEOUT_SECONDS = 30

    def __init__(self, device_id, config={}):
        super().__init__(config)

        self.device_type = 'mote'
        self.device_id = device_id

    def disable(self):
        return self._execute('disable')

    def reset(self):
        CMD_RESET = ord('Q').to_bytes(1, 'big')
        return self._send_serialbytes(CMD_RESET)

    def set_dagroot(self):
        CMD_SETDAGROOT = ord('R').to_bytes(1, 'big')
        ACTION_TOGGLE = ord('T').to_bytes(1, 'big')

        prefix = netaddr.IPAddress(self.config['6tisch']['prefix'])
        prefix = int(prefix >> 64).to_bytes(8, 'big')

        # shorthand
        link_layer_key = self.config['6tisch']['link_layer_key']
        index = link_layer_key['index'].to_bytes(1, 'big')
        key = bytes([int(h, 16)
                     for h in link_layer_key['value'].split('-')])

        return self._send_serialbytes(CMD_SETDAGROOT
                                      + ACTION_TOGGLE
                                      + prefix
                                      + index
                                      + key)

    def program(self,
                firmware_name: 'firmware name',
                ihex_file_path: 'path to a firmware file to program (.ihex))'):
        assert firmware_name.endswith('.ihex')
        base64_string = get_base64_string(ihex_file_path)
        # adjust base64 string for json.dumps() and opentestbed:
        # json.dumps() doesn't accept bytes object; needs to convert
        # to string
        base64_string = base64_string.decode('utf-8')
        # remove all new line characters, which opentestbed don't
        # accept
        base64_string = base64_string.replace('\n', '')
        return self._execute('program',
                             {'description': firmware_name,
                              'hex': base64_string},
                             timeout=self.PROGRAM_TIMEOUT_SECONDS)

    def _send_serialbytes(self, msg_body):
        serialbytes = [b for b in (HDLC_FLAG
                                   + escape(msg_body[:] + crc(msg_body))
                                   + HDLC_FLAG)]
        payload = {'serialbytes': serialbytes}
        return self._execute('tomoteserialbytes', payload)
