import click
import logging

from cli.mqtt_client import MQTTClient

logger = logging.getLogger(__name__)

class OTBox(MQTTClient):
    ECHO_TIMEOUT_SECONDS = 3
    STATUS_TIMEOUT_SECONDS = 5
    DISCOVERMOTES_TIMEOUT_SECONDS = 30

    def __init__(self, device_id, config={}):
        super().__init__(config)

        self.device_type = 'box'
        self.device_id = device_id

    def echo(self, message: 'message to send'):
        ret = self._execute('echo', {'payload': message},
                            timeout=self.ECHO_TIMEOUT_SECONDS)
        if ret:
            if isinstance(ret, list):
                ret = [(device_id, return_value['payload'])
                       for device_id, return_value in ret]
            else:
                ret = ret['payload']
        else:
            # do nothing
            pass
        return ret

    def status(self):
        return self._execute('status',
                             timeout=self.STATUS_TIMEOUT_SECONDS)

    def discovermotes(self):
        return self._execute('discovermotes',
                            timeout=self.DISCOVERMOTES_TIMEOUT_SECONDS)

    def changesoftware(self,
                       version: 'otbox software version string',
                       url: 'location of a zip file of otbox software'):
        assert url.endswith('.zip')
        return self._execute('changesoftware', {'version': version, 'url': url})

    def picturetoscreen(self, url: 'location of a picture to show'):
        assert url.endswith('.jpg')
        return self._execute('picturetoscreen', {'url': url})

    def colortoscreen(self,
                      red: 'red value in RGB',
                      green: 'green in RGB',
                      blue: 'blue in RGB'):
        for color in [red, green, blue]:
            assert isinstance(color, int)
            assert color >= 0 and color <= 255

        return self._execute('colortoscreen', {'r': red, 'g': green, 'b': blue})

    def hostnametoscreen(self):
        return self._execute('hostnametoscreen')

    def changelocation(self,
                       location: 'new location string of the target otbox'):
        return self._execute('changelocation', {'location': location})
