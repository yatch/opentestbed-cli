import argparse
import logging
import os
from pprint import pprint
import threading
import time

from cli.otbox import OTBox
from cli.mote import Mote
from cli.utils import setup_logger

# set log level
setup_logger(verbose=1)
logger = logging.getLogger('app')

# command line options
parser = argparse.ArgumentParser()
parser.add_argument('-p', dest='program', default=False, action='store_true',
                    help='update the firmware in the mote')
parser.add_argument('-d', dest='duration', default=600, type=int,
                    help='duration of one experiment (in seconds)')
parser.add_argument('-n', dest='num_experiments', default=10, type=int,
                    help='number of experiments to perform')
args = parser.parse_args()

# collect mote information
logger.info('Getting otbox status...')
otbox_list = OTBox('all').status()

all_mote_id_list = [mote['EUI64']
                    for _, otbox_status in otbox_list
                    for mote in otbox_status['motes']]

## use only motes on the floor 1 of Buidling A (in rooms of "A1xx")
target_mote_id_list = [mote['EUI64']
                       for _, otbox_status in otbox_list
                       if otbox_status['location'].startswith('A1')
                       for mote in otbox_status['motes']]
logger.info('Use {0} motes out of {1}'.format(len(target_mote_id_list),
                                              len(all_mote_id_list)))

if args.program:
    # program firmwares
    logger.info('Update the firmwares...')
    openwsn_fw_build_dir = os.path.join('/Users/yatch/Work/openwsn-fw/',
                                        'build/openmote-b-24ghz_armgcc/',
                                        'projects/common/')
    fw_leds = {'firmware_name': 'leds.ihex',
               'ihex_file_path': os.path.join(openwsn_fw_build_dir,
                                               '01bsp_leds_prog.ihex')}
    fw_openwsn = {'firmware_name': 'openwsn.ihex',
                  'ihex_file_path': os.path.join(openwsn_fw_build_dir,
                                                 '03oos_openwsn_prog.ihex')}

    # for target, use openwsn_prog
    threads = []
    for mote_id in all_mote_id_list:
        mote = Mote(mote_id)

        if mote_id in target_mote_id_list:
            firmware = fw_openwsn
        else:
            firmware = fw_leds

        def _program(_mote, _firmware):
            ret = _mote.program(**_firmware)
            logger.info('{0}: {1}'.format(_mote.device_id, ret))

        thread = threading.Thread(target=_program,
                                  args=(mote, firmware))
        thread.start()
        threads.append(thread)
    # wait until all the motes get the new firmwares
    for thread in threads:
        thread.join()

# create a list of target motes
target_motes = [Mote(mote_id) for mote_id in target_mote_id_list]

# experiments
for i in range(args.num_experiments):
    logger.info('Starting Experiment#{0}'.format(i + 1))

    # reset the target motes
    logger.info('Resetting the motes...')
    threads = []
    for mote in target_motes:
        def _reset():
            logger.info('{0}: {1}'.format(mote.device_id, mote.reset()))
        thread = threading.Thread(target=_reset)
        thread.start()
        threads.append(thread)
    for thread in threads:
        thread.join()

    # select the first mote in the list for the root node
    root_mote = target_motes[0]
    ret = root_mote.set_dagroot()
    logger.info('Make {0} the DAGRoot: {1}'.format(root_mote.device_id, ret))

    # wait until the end of this experiment
    logger.info('Sleeping for {0} seconds...'.format(args.duration))
    time.sleep(args.duration)
