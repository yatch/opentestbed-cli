import types

import pytest

from cli.otbox import OTBox

TEST_DEVICE_ID = 'otbox00'

def _execute(self, command, payload={}, timeout=None):
    self.last_command = command
    self.last_payload = payload

@pytest.fixture
def otbox():
    _otbox = OTBox(TEST_DEVICE_ID)
    _otbox._execute = types.MethodType(_execute, _otbox)
    return _otbox

def test_echo(otbox):
    test_data = 'some random payload'
    otbox.echo(test_data)
    assert otbox.last_command == 'echo'
    assert otbox.last_payload == {'payload': test_data}

def test_status(otbox):
    otbox.status()
    assert otbox.last_command == 'status'
    assert not otbox.last_payload

def test_discovermotes(otbox):
    otbox.discovermotes()
    assert otbox.last_command == 'discovermotes'
    assert not otbox.last_payload

def test_changesoftware(otbox):
    dummy_version = 'ververver'
    dummy_url = 'https://example.com/software.zip'
    otbox.changesoftware(dummy_version, dummy_url)
    assert otbox.last_command == 'changesoftware'
    assert otbox.last_payload == {'version': dummy_version,
                                  'url': dummy_url}

def test_picturetoscreen(otbox):
    dummy_url = 'https://example.com/picture.jpg'
    otbox.picturetoscreen(dummy_url)
    assert otbox.last_command == 'picturetoscreen'
    assert otbox.last_payload == {'url': dummy_url}

def test_colortoscreen(otbox):
    dummy_r = 100
    dummy_g = 200
    dummy_b = 250
    otbox.colortoscreen(dummy_r, dummy_g, dummy_b)
    assert otbox.last_command == 'colortoscreen'
    assert otbox.last_payload == {'r': dummy_r, 'g': dummy_g, 'b': dummy_b}

def test_hostnametoscreen(otbox):
    otbox.hostnametoscreen()
    assert otbox.last_command == 'hostnametoscreen'
    assert not otbox.last_payload

def test_changelocation(otbox):
    dummy_location = 'mars'
    otbox.changelocation(dummy_location)
    assert otbox.last_command == 'changelocation'
    assert otbox.last_payload == {'location': dummy_location}
