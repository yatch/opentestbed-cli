import base64
import os
import types

import pytest
import yaml

from cli.mote import Mote
from cli.msg import escape, unescape, crc, HDLC_FLAG

TEST_DEVICE_ID = '00-00-00-00-00-00-00-00'

def _execute(self, command, payload={}, timeout=None):
    self.last_command = command
    self.last_payload = payload

@pytest.fixture
def mote():
    _mote = Mote(TEST_DEVICE_ID)
    _mote._execute = types.MethodType(_execute, _mote)
    return _mote

def test_set_root(mote):
    msg_body = bytes([82, 84, 187, 187, 0, 0, 0, 0, 0, 0, 1,
                      255, 255, 255, 255, 255, 255, 255, 255,
                      255, 255, 255, 255, 255, 255, 255, 255])
    serialbytes = HDLC_FLAG + escape(msg_body + crc(msg_body)) + HDLC_FLAG
    serialbytes = [b for b in serialbytes]

    mote.set_dagroot()
    assert mote.last_command == 'tomoteserialbytes'
    assert mote.last_payload == {'serialbytes': serialbytes}

def test_reset(mote):
    msg_body = ord('Q').to_bytes(1, 'big')
    serialbytes = HDLC_FLAG + escape(msg_body + crc(msg_body)) + HDLC_FLAG
    serialbytes = [b for b in serialbytes]

    mote.reset()
    assert mote.last_command == 'tomoteserialbytes'
    assert mote.last_payload == {'serialbytes': serialbytes}

def test_disable(mote):
    mote.disable()
    assert mote.last_command == 'disable'
    assert not mote.last_payload

def test_program(mote):
    dummy_firmware_name = 'fake_image.ihex'
    dummy_ihex_file_path = os.path.join(os.path.dirname(__file__),
                                        './dummy_binary_file')
    dummy_ihex_base64_file_path = dummy_ihex_file_path + '_base64.txt'
    with open(dummy_ihex_base64_file_path, 'r') as f:
        # this file is generated by 'base64' command
        file_size = os.path.getsize(dummy_ihex_base64_file_path)
        dummy_ihex_base64_string = f.read(file_size)
        if dummy_ihex_base64_string.endswith('\n'):
            dummy_ihex_base64_string = dummy_ihex_base64_string.strip()
    mote.program(dummy_firmware_name, dummy_ihex_file_path)
    assert mote.last_command == 'program'
    assert mote.last_payload == {'description': dummy_firmware_name,
                                 'hex': dummy_ihex_base64_string}

def test_program_all():
    mote = Mote('all')
    assert mote._cmd_topic('program') == ('opentestbed/deviceType/mote/'
                                         +'deviceId/all/cmd/program')
    assert mote._resp_topic('program') == ('opentestbed/deviceType/mote/'
                                          +'deviceId/+/resp/program')
